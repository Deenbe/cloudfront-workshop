AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront Workshop Presigned URL and Cookies example"
Parameters:
  APIStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "demo"
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "GetImage"
Resources:
  #lambdaIAMRole:
  LambdaServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
            - "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      Policies:
      - PolicyName: "LambdaServiceRolePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
            - Action:
              - s3:Get*
              - s3:List*
              Effect: Allow
              Resource: arn:aws:s3:::*
  FetchImageAPI:  
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "cloudfrontlabapi"
      Description: "API that fetches images from S3"
      EndpointConfiguration:
        Types:
        - REGIONAL
  ImageResource:  
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref FetchImageAPI
      ParentId: !GetAtt "FetchImageAPI.RootResourceId"
      PathPart: images
  ImageResourceHTTPMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "ImageResource"
      RestApiId: !Ref "FetchImageAPI"
  FetchImageAPIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ImageResourceHTTPMethod"
    Properties:
      RestApiId: !Ref "FetchImageAPI"
      StageName: !Ref "APIStageName"
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: cloudfront-workshop-presignedurl-ex
        S3Key: Get_Image.zip
      Description: "GetImage"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: Get_Image.get_image
      MemorySize: 128
      Role: !GetAtt "LambdaServiceRole.Arn"
      Runtime: python3.7
      Timeout: 10
  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90
  LambdaPermissions:
    Type: AWS::Lambda::Permission
    DependsOn:
    - lambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref lambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ""
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref FetchImageAPI
          - '/*/POST/images'
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${FetchImageAPI}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}"
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
  # arn:aws:iam::aws:policy/SecretsManagerReadWrite